import time as tm
import functions as fc

st, stop = tm.time(), False

data, cdata, max_value = fc.get_data("excode.txt")

while not stop:
    mapa = fc.update_mapa(cdata, max_value)

    psts, path = fc.find_path(mapa)

    stop = fc.avoid_seq(mapa, psts, cdata)
    
    for r in path:
        print(r)
    
    print(mapa[12][12])
    
    print(tm.time() - st)

##################################################

import copy as cp

def get_data(filename):
    t, data, cdata = 0, [], []
    
    with open(filename) as file:
        for line in file:
            new_line = []
            
            for c in line.strip():
                new_line.append(int(c))
            
            data.append(new_line)
    
    for r in data:
        t += sum(r)
    
    for i, r in enumerate(data):
        new_line = []
        
        for j, c in enumerate(r):
            new_line.append(cp.deepcopy([data[i][j]] * 4))
        
        cdata.append(cp.deepcopy(new_line))
    
    return data, cdata, pow(t, 2)

def update_mapa(cdata, max_value):
    c, mapa = (0, 0), []
    
    for r in cdata:
        new_line = []
        
        for e in r:
            new_line.append(cp.deepcopy([max_value, ""]))
        
        mapa.append(new_line)
    
    mapa[c[0]][c[1]][0] = 0
    
    visited, unvisited = set(), set()
    
    unvisited.add(c)
    
    while len(unvisited) > 0:
        min_value = 0
        
        if c[0] - 1 >= 0:
            if mapa[c[0]][c[1]][0] + cdata[c[0] - 1][c[1]][2] < mapa[c[0] - 1][c[1]][0]:
                mapa[c[0] - 1][c[1]] = [mapa[c[0]][c[1]][0] + cdata[c[0] - 1][c[1]][2], mapa[c[0]][c[1]][1] + "N"]
            
            if (c[0] - 1, c[1]) not in visited:
                unvisited.add((c[0] - 1, c[1]))
        
        if c[1] + 1 < len(cdata[c[0]]):
            if mapa[c[0]][c[1]][0] + cdata[c[0]][c[1] + 1][3] < mapa[c[0]][c[1] + 1][0]:
                mapa[c[0]][c[1] + 1] = [mapa[c[0]][c[1]][0] + cdata[c[0]][c[1] + 1][3], mapa[c[0]][c[1]][1] + "E"]
            
            if (c[0], c[1] + 1) not in visited:
                unvisited.add((c[0], c[1] + 1))
        
        if c[0] + 1 < len(cdata):
            if mapa[c[0]][c[1]][0] + cdata[c[0] + 1][c[1]][0] < mapa[c[0] + 1][c[1]][0]:
                mapa[c[0] + 1][c[1]] = [mapa[c[0]][c[1]][0] + cdata[c[0] + 1][c[1]][0], mapa[c[0]][c[1]][1] + "S"]
            
            if (c[0] + 1, c[1]) not in visited:
                unvisited.add((c[0] + 1, c[1]))
        
        if c[1] - 1 >= 0:
            if mapa[c[0]][c[1]][0] + cdata[c[0]][c[1] - 1][1] < mapa[c[0]][c[1] - 1][0]:
                mapa[c[0]][c[1] - 1] = [mapa[c[0]][c[1]][0] + cdata[c[0]][c[1] - 1][1], mapa[c[0]][c[1]][1] + "W"]
            
            if (c[0], c[1] - 1) not in visited:
                unvisited.add((c[0], c[1] - 1))
        
        visited.add(c)
        
        unvisited.remove(c)
        
        min_value += max_value
        
        for u in unvisited:
            if mapa[u[0]][u[1]][0] < min_value:            
                min_value = mapa[u[0]][u[1]][0]
                
                c = u
    
    return mapa

def find_path(mapa):
    psts, path = [], []

    for i in mapa:
        path.append(["-"] * len(i))

    oc = [len(mapa) - 1, len(mapa[len(mapa) - 1]) - 1]

    nc = cp.deepcopy(oc)

    path[nc[0]][nc[1]] = "X"
    
    psts.append((nc[0], nc[1]))

    while nc[0] != 0 or nc[1] != 0:
        if oc[0] - 1 >= 0 and mapa[oc[0] - 1][oc[1]] < mapa[nc[0]][nc[1]]:
            nc[0] = oc[0] - 1
            nc[1] = oc[1] + 0
        
        if oc[1] - 1 >= 0 and mapa[oc[0]][oc[1] - 1] < mapa[nc[0]][nc[1]]:
            nc[0] = oc[0] + 0
            nc[1] = oc[1] - 1
        
        if oc[0] + 1 < len(mapa) and mapa[oc[0] + 1][oc[1]] < mapa[nc[0]][nc[1]]:
            nc[0] = oc[0] + 1
            nc[1] = oc[1] + 0
        
        if oc[1] + 1 < len(mapa[oc[0]]) and mapa[oc[0]][oc[1] + 1] < mapa[nc[0]][nc[1]]:
            nc[0] = oc[0] + 0
            nc[1] = oc[1] + 1
        
        oc = cp.deepcopy(nc)
        
        path[oc[0]][oc[1]] = "X"
        
        psts.append((oc[0], oc[1]))
    
    return psts, path

def avoid_seq(mapa, psts, cdata):
    flag = True
    
    seq = mapa[len(mapa) - 1][len(mapa[len(mapa) - 1]) - 1][1]

    i, elem, count = len(seq) - 2, seq[-1], 1

    while i >= 0:
        if elem != seq[i]:
            elem = seq[i]
            
            count = 1
        else:
            count += 1
        
        if count >= 4:
            flag, drct, pos = False, seq[i + 3], psts[len(psts) - (i + 5)]
            
            dtnr = {"S": 0, "W": 1, "N": 2, "E": 3}
            
            cdata[pos[0]][pos[1]][dtnr[drct]] += 1
            
            break
        
        i -= 1
    
    return flag

def write_path(filename, path):
    with open(filename, "w") as file:
        for r in path:
            for c in r:
                file.write(c + "\t")
            
            file.write("\n")

##################################################

import time as tm
import functions as fc

st = tm.time()

data, mapa, max_value = fc.get_data("excode.txt")

fc.update_mapa(data, mapa, max_value)

path = fc.find_path(mapa)

for r in path:
    print(r)

print(mapa[12][12])

##################################################

import copy as cp

def get_data(filename):
    t, data, mapa = 0, [], []
    
    with open(filename) as file:
        for line in file:
            new_line = []
            
            for c in line.strip():
                new_line.append(int(c))
            
            data.append(new_line)
    
    for r in data:
        t += sum(r)
    
    for r in data:
        new_line = []
        
        for c in r:
            new_line.append(cp.deepcopy([t, ""]))
        
        mapa.append(new_line)
    
    return data, mapa, t

def update_mapa(data, mapa, max_value):
    c = (0, 0)

    mapa[c[0]][c[1]][0] = 0

    visited, unvisited = set(), set()

    unvisited.add(c)

    while len(unvisited) > 0:
        min_value = 0
        
        if c[0] - 1 >= 0:
            if mapa[c[0]][c[1]][0] + data[c[0] - 1][c[1]] < mapa[c[0] - 1][c[1]][0]:
                mapa[c[0] - 1][c[1]] = [mapa[c[0]][c[1]][0] + data[c[0] - 1][c[1]], mapa[c[0]][c[1]][1] + "N"]
            
            if (c[0] - 1, c[1]) not in visited:
                unvisited.add((c[0] - 1, c[1]))
        
        if c[1] - 1 >= 0:
            if mapa[c[0]][c[1]][0] + data[c[0]][c[1] - 1] < mapa[c[0]][c[1] - 1][0]:
                mapa[c[0]][c[1] - 1] = [mapa[c[0]][c[1]][0] + data[c[0]][c[1] - 1], mapa[c[0]][c[1]][1] + "W"]
            
            if (c[0], c[1] - 1) not in visited:
                unvisited.add((c[0], c[1] - 1))
        
        if c[0] + 1 < len(data):
            if mapa[c[0]][c[1]][0] + data[c[0] + 1][c[1]] < mapa[c[0] + 1][c[1]][0]:
                mapa[c[0] + 1][c[1]] = [mapa[c[0]][c[1]][0] + data[c[0] + 1][c[1]], mapa[c[0]][c[1]][1] + "S"]
            
            if (c[0] + 1, c[1]) not in visited:
                unvisited.add((c[0] + 1, c[1]))
        
        if c[1] + 1 < len(data[c[0]]):
            if mapa[c[0]][c[1]][0] + data[c[0]][c[1] + 1] < mapa[c[0]][c[1] + 1][0]:
                mapa[c[0]][c[1] + 1] = [mapa[c[0]][c[1]][0] + data[c[0]][c[1] + 1], mapa[c[0]][c[1]][1] + "E"]
            
            if (c[0], c[1] + 1) not in visited:
                unvisited.add((c[0], c[1] + 1))
        
        visited.add(c)
        
        unvisited.remove(c)
        
        min_value += max_value
        
        for u in unvisited:
            if mapa[u[0]][u[1]][0] < min_value:            
                min_value = mapa[u[0]][u[1]][0]
                
                c = u

def find_path(mapa):
    path = []

    for i in mapa:
        path.append(["-"] * len(i))

    oc = [len(mapa) - 1, len(mapa[len(mapa) - 1]) - 1]

    nc = cp.deepcopy(oc)

    path[nc[0]][nc[1]] = "X"

    while nc[0] != 0 or nc[1] != 0:
        if oc[0] - 1 >= 0 and mapa[oc[0] - 1][oc[1]] < mapa[nc[0]][nc[1]]:
            nc[0] = oc[0] - 1
            nc[1] = oc[1] + 0
        
        if oc[1] - 1 >= 0 and mapa[oc[0]][oc[1] - 1] < mapa[nc[0]][nc[1]]:
            nc[0] = oc[0] + 0
            nc[1] = oc[1] - 1
        
        if oc[0] + 1 < len(mapa) and mapa[oc[0] + 1][oc[1]] < mapa[nc[0]][nc[1]]:
            nc[0] = oc[0] + 1
            nc[1] = oc[1] + 0
        
        if oc[1] + 1 < len(mapa[oc[0]]) and mapa[oc[0]][oc[1] + 1] < mapa[nc[0]][nc[1]]:
            nc[0] = oc[0] + 0
            nc[1] = oc[1] + 1
        
        oc = cp.deepcopy(nc)
        
        path[oc[0]][oc[1]] = "X"
    
    return path

def write_path(filename, path):
    with open(filename, "w") as file:
        for r in path:
            for c in r:
                file.write(c + "\t")
            
            file.write("\n")